{"version":3,"names":["useWebSocketStore","common_vendor","defineStore","messages","ref","socketTask","isConnected","isConnecting","messageQueue","lastCloseTime","stores_barrage","useBarrageStore","messageProcessor","stores_messageProcessor","useMessageProcessorStore","ensureSocketClosed","Promise","resolve","value","close","success","index","__f__","Date","now","fail","err","connect","_ref","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","Error","reject","token","getStorageSync","getNetworkType","res","networkType","connectSocket","url","concat","utils_config","wsUrl","header","Authorization","connectTimeout","setTimeout","onOpen","clearTimeout","length","_doSendMessage","shift","onMessage","res2","data","processMessage","onError","onClose","error","t0","stop","apply","arguments","message","send","JSON","stringify","sendMessage","_ref2","_callee2","_callee2$","_context2","push","_x","_ref3","_callee3","_callee3$","_context3"],"sources":["websocket.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref } from 'vue'\nimport { wsUrl } from '../utils/config'\nimport { useBarrageStore } from './barrage'\nimport { useMessageProcessorStore } from './messageProcessor'\n\nexport const useWebSocketStore = defineStore('websocket', () => {\n  const messages = ref([])\n  let socketTask = null\n  const isConnected = ref(false)\n  const isConnecting = ref(false) // 新增：标记是否正在连接中\n  const messageQueue = ref([]) // 用于存储连接前的消息\n\n  // 新增：上一次关闭的时间戳，用于防止频繁切换\n  const lastCloseTime = ref(0)\n\n  // 在store内部获取barrageStore实例\n  const barrageStore = useBarrageStore()\n  const messageProcessor = useMessageProcessorStore()\n\n  // 确保WebSocket完全关闭\n  const ensureSocketClosed = () => {\n    return new Promise((resolve) => {\n      if (!socketTask) {\n        resolve()\n        return\n      }\n\n      // 如果已连接状态，正常关闭\n      if (isConnected.value) {\n        socketTask.close({\n          success: () => {\n            console.log('WebSocket正常关闭')\n            socketTask = null\n            isConnected.value = false\n            lastCloseTime.value = Date.now()\n            resolve()\n          },\n          fail: (err) => {\n            console.error('WebSocket关闭失败', err)\n            // 即使关闭失败，也认为连接已关闭\n            socketTask = null\n            isConnected.value = false\n            lastCloseTime.value = Date.now()\n            resolve()\n          },\n        })\n      } else {\n        // 如果不是已连接状态，直接置空\n        socketTask = null\n        isConnected.value = false\n        lastCloseTime.value = Date.now()\n        resolve()\n      }\n    })\n  }\n\n  const connect = async () => {\n    // 如果已经连接，直接返回\n    if (isConnected.value && socketTask) {\n      console.log('WebSocket已经连接，无需重连')\n      return\n    }\n\n    // 如果正在连接中，等待连接完成\n    if (isConnecting.value) {\n      console.log('WebSocket正在连接中，请稍候')\n      throw new Error('连接正在进行中，请勿重复连接')\n    }\n\n    // 检查上次关闭时间，防止频繁连接\n    const now = Date.now()\n    if (now - lastCloseTime.value < 1000) {\n      console.log('连接过于频繁，请稍后再试')\n      throw new Error('连接过于频繁，请稍后再试')\n    }\n\n    try {\n      isConnecting.value = true\n\n      // 确保之前的连接已完全关闭\n      await ensureSocketClosed()\n\n      return new Promise((resolve, reject) => {\n        const token = uni.getStorageSync('token')\n\n        // 检查当前WebSocket连接数量\n        uni.getNetworkType({\n          success: function (res) {\n            console.log('当前网络类型:', res.networkType)\n            if (res.networkType === 'none') {\n              isConnecting.value = false\n              reject(new Error('当前无网络连接'))\n              return\n            }\n\n            // 创建新的WebSocket连接\n            try {\n              socketTask = uni.connectSocket({\n                url: `${wsUrl}/content/ws`,\n                header: { Authorization: `bearer ${token}` },\n                success: () => {\n                  console.log('WebSocket连接请求已发送')\n                },\n                fail: (err) => {\n                  console.error('WebSocket连接请求失败', err)\n                  isConnecting.value = false\n                  reject(err)\n                },\n              })\n\n              // 设置连接超时\n              const connectTimeout = setTimeout(() => {\n                if (!isConnected.value && isConnecting.value) {\n                  console.error('WebSocket连接超时')\n                  if (socketTask) {\n                    socketTask.close()\n                    socketTask = null\n                  }\n                  isConnecting.value = false\n                  reject(new Error('WebSocket连接超时'))\n                }\n              }, 10000) // 10秒超时\n\n              socketTask.onOpen(() => {\n                console.log('WebSocket连接已打开')\n                clearTimeout(connectTimeout)\n                isConnected.value = true\n                isConnecting.value = false\n\n                // 延迟一点再处理消息队列，确保连接稳定\n                setTimeout(() => {\n                  // 处理排队的消息\n                  while (messageQueue.value.length > 0) {\n                    _doSendMessage(messageQueue.value.shift())\n                  }\n                  resolve()\n                }, 300)\n              })\n\n              socketTask.onMessage((res) => {\n                console.log('WebSocket收到消息:', res.data)\n                // 交由消息处理器处理\n                messageProcessor.processMessage(res.data)\n              })\n\n              socketTask.onError((err) => {\n                console.error('WebSocket发生错误:', err)\n                clearTimeout(connectTimeout)\n                isConnected.value = false\n                isConnecting.value = false\n                socketTask = null\n                reject(err)\n              })\n\n              socketTask.onClose(() => {\n                console.log('WebSocket连接已关闭')\n                isConnected.value = false\n                isConnecting.value = false\n                socketTask = null\n              })\n            } catch (error) {\n              console.error('创建WebSocket连接出错:', error)\n              isConnecting.value = false\n              reject(error)\n            }\n          },\n          fail: function (err) {\n            console.error('获取网络类型失败:', err)\n            isConnecting.value = false\n            reject(new Error('无法获取网络类型'))\n          },\n        })\n      })\n    } catch (error) {\n      isConnecting.value = false\n      throw error\n    }\n  }\n\n  const _doSendMessage = (message) => {\n    return new Promise((resolve, reject) => {\n      if (!socketTask || !isConnected.value) {\n        reject(new Error('WebSocket未连接'))\n        return\n      }\n\n      socketTask.send({\n        data: JSON.stringify(message),\n        success: () => {\n          console.log('WebSocket消息发送成功')\n          resolve()\n        },\n        fail: (err) => {\n          console.error('WebSocket消息发送失败', err)\n          reject(err)\n        },\n      })\n    })\n  }\n\n  const sendMessage = async (message) => {\n    // 如果未连接，将消息加入队列\n    if (!isConnected.value || !socketTask) {\n      console.log('WebSocket未连接，消息加入队列')\n      messageQueue.value.push(message)\n      return Promise.reject(new Error('WebSocket未连接，消息加入队列'))\n    }\n\n    return _doSendMessage(message)\n  }\n\n  const close = async () => {\n    console.log('关闭WebSocket连接')\n    return ensureSocketClosed()\n  }\n\n  return { messages, connect, sendMessage, close, isConnected, isConnecting }\n})\n"],"mappings":"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","ignoreList":[]}