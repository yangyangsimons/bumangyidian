{"version":3,"names":["useMessageProcessorStore","common_vendor","defineStore","barrageStore","stores_barrage","useBarrageStore","stores_audioPlayer","useAudioPlayerStore","isStreaming","ref","accumulatedText","processMessage","data","JSON","parse","e","index","__f__","showTextMessage","cmd","handleBgMusic","handleTtsAudio","handleFinishMessage","handleSubjectRequest","handleErrorMessage","text","msg","audio_url","section_id","audio_id","value","appendToStreamingMessage","full_text","finishStreamingMessage","subjects","join","addMessage","type","content","showToast","title","icon","duration","arguments","length","undefined"],"sources":["messageProcessor.js"],"sourcesContent":["// stores/messageProcessor.js\nimport { defineStore } from 'pinia'\nimport { useBarrageStore } from './barrage'\nimport { useAudioPlayerStore } from './audioPlayer'\n\nexport const useMessageProcessorStore = defineStore('messageProcessor', () => {\n  const barrageStore = useBarrageStore()\n  const audioPlayerStore = useAudioPlayerStore()\n\n  // 处理接收到的流式消息\n  const isStreaming = ref(false)\n  const accumulatedText = ref('')\n\n  // 处理接收到的消息\n  const processMessage = (data) => {\n    // 如果是字符串，先尝试解析为JSON\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data)\n      } catch (e) {\n        console.error('消息解析失败', e)\n        // 作为纯文本消息处理\n        showTextMessage(data)\n        return\n      }\n    }\n\n    // 根据cmd类型处理不同消息\n    switch (data.cmd) {\n      case 'bg_music':\n        handleBgMusic(data)\n        break\n      case 'audio':\n        handleTtsAudio(data)\n        break\n      case 'finish':\n        handleFinishMessage(data)\n        break\n      case 'subject':\n        handleSubjectRequest(data)\n        break\n      case 'error':\n        handleErrorMessage(data)\n        break\n      default:\n        // 未知消息类型，尝试作为文本显示\n        console.warn('未知消息类型', data)\n        if (data.text || data.msg) {\n          showTextMessage(data.msg)\n        }\n    }\n  }\n\n  // 处理背景音乐消息\n  const handleBgMusic = (data) => {\n    console.log('收到背景音乐消息', data)\n    // const { audio_url, play_time, section_id } = data\n\n    // // 播放背景音乐\n    // audioPlayerStore.playBgMusic(audio_url, play_time || 0)\n\n    // // 可以选择是否在对话界面显示音乐播放信息\n    // barrageStore.addMessage({\n    //   type: 'system',\n    //   content: '🎵 背景音乐播放中...',\n    //   showInUI: false, // 如果不想在界面显示，可以设置标记\n    // })\n  }\n\n  // 处理TTS音频消息\n  const handleTtsAudio = (data) => {\n    console.log('收到TTS音频消息', data)\n    const { audio_url, section_id, audio_id, text } = data\n\n    // 处理文本部分 - 流式文本累积\n    if (text) {\n      if (!isStreaming.value) {\n        // 第一次收到音频文本，标记开始流式响应\n        isStreaming.value = true\n        accumulatedText.value = text\n\n        // 在对话框中创建新消息或追加到现有流式消息\n        barrageStore.appendToStreamingMessage(text)\n      } else {\n        // 已经在流式响应中，继续累积文本\n        accumulatedText.value += text\n\n        // 追加到当前流式消息\n        barrageStore.appendToStreamingMessage(text)\n      }\n    }\n\n    // // 播放TTS音频\n    // audioPlayerStore.playTtsAudio(audio_url, section_id, audio_id)\n\n    // // 可以选择是否在界面显示音频播放信息\n    // barrageStore.addMessage({\n    //   type: 'ai',\n    //   content: '🔊 语音回复中...',\n    //   audioUrl: audio_url,\n    //   isAudio: true,\n    // })\n  }\n\n  // 处理结束消息\n  const handleFinishMessage = (data) => {\n    console.log('收到结束消息', data)\n    const { full_text } = data\n\n    // 如果有full_text，用它替换累积的文本\n    if (full_text) {\n      accumulatedText.value = full_text\n    }\n\n    // 结束流式消息，使用累积的文本或full_text\n    barrageStore.finishStreamingMessage(full_text || accumulatedText.value)\n\n    // 重置流式状态\n    isStreaming.value = false\n    accumulatedText.value = ''\n  }\n\n  // 处理主题选择请求\n  const handleSubjectRequest = (data) => {\n    console.log('收到主题选择请求', data)\n    const subjects = data.subjects.join('\\n')\n    console.log('可选主题列表', subjects)\n    // 显示可选主题列表\n    barrageStore.addMessage({\n      type: 'subject',\n      content: data.msg + '\\n' + subjects,\n    })\n  }\n\n  // 处理错误消息\n  const handleErrorMessage = (data) => {\n    console.log('收到错误消息', data)\n    const { text } = data\n\n    // 显示错误信息\n    uni.showToast({\n      title: text || '系统错误',\n      icon: 'none',\n      duration: 2000,\n    })\n\n    // 同时在对话界面显示\n    barrageStore.addMessage({\n      type: 'error',\n      content: text || '系统错误',\n    })\n  }\n\n  // 通用显示文本消息\n  const showTextMessage = (text, type = 'ai') => {\n    if (!text) return\n\n    barrageStore.addMessage({\n      type: type,\n      content: text,\n    })\n  }\n\n  return {\n    processMessage,\n  }\n})\n"],"mappings":"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","ignoreList":[]}