{"version":3,"names":["useAudioPlayerStore","common_vendor","defineStore","subjectStore","stores_subject","useSubjectStore","isRadioStore","stores_isRadio","useIsRadioStore","bgAudioManager","ref","bgSectionId","bgAudioId","bgPlayTime","bgIsPlaying","bgVolume","bgLoop","currentBgUrl","musicTitle","computed","concat","subject","ttsAudioContext","ttsSectionId","ttsAudioId","ttsIsPlaying","ttsPlayTime","ttsVolume","ttsQueue","isProcessingQueue","UPLOAD_PROGRESS_URL","utils_config","baseUrl","initBgAudioManager","value","index","getBackgroundAudioManager","onEnded","__f__","setTimeout","playBgMusic","reportBgMusicFinish","onTimeUpdate","currentTime","onError","err","onStop","onPlay","onPause","updateBgMusicProperties","title","epname","initTtsAudioContext","createInnerAudioContext","volume","length","reportTtsFinish","playNextInQueue","onCanplay","duration","setTtsVolume","Math","min","max","setBgVolume","setBgLoop","loop","url","playTime","arguments","undefined","sectionId","audioId","src","startTime","pauseBgMusic","pause","resumeBgMusic","play","enqueueTtsAudio","currentQueueLength","push","nextAudio","shift","remainingInQueue","playTtsAudioDirectly","substring","playTtsAudio","toggleBgMusic","toggleTtsAudio","stopBgMusic","stop","stopTtsAudio","stopAllAudio","reportData","section_id","audio_id","play_time","Number","toFixed","is_finish","setIsRadio","sendProgressReport","reportCurrentProgress","data","token","getStorageSync","request","method","header","Authorization","success","res","fail","getQueueStatus","queueLength","isProcessing","currentlyPlaying","resetTtsAudio","resetBgMusic","isAnyPlaying"],"sources":["audioPlayer.js"],"sourcesContent":["// stores/audioPlayer.js\nimport { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { baseUrl } from '../utils/config'\nimport { useSubjectStore } from './subject' // 导入主题store\nimport { useIsRadioStore } from './isRadio'\nexport const useAudioPlayerStore = defineStore('audioPlayer', () => {\n  // 获取主题store\n  const subjectStore = useSubjectStore()\n  const isRadioStore = useIsRadioStore()\n  // 背景音乐相关状态\n  const bgAudioManager = ref(null)\n  const bgSectionId = ref(null)\n  const bgAudioId = ref(null)\n  const bgPlayTime = ref(0)\n  const bgIsPlaying = ref(false)\n  const bgVolume = ref(1.0) // 背景音乐音量，范围0-1\n  const bgLoop = ref(false) // 是否循环播放背景音乐\n  const currentBgUrl = ref('') // 当前背景音乐URL，用于循环播放时重新播放\n\n  // 计算属性：获取当前音乐标题（基于主题）\n  const musicTitle = computed(() => {\n    return `${subjectStore.subject} `\n  })\n\n  // TTS相关状态\n  const ttsAudioContext = ref(null)\n  const ttsSectionId = ref(null)\n  const ttsAudioId = ref(null)\n  const ttsIsPlaying = ref(false)\n  const ttsPlayTime = ref(0)\n  const ttsVolume = ref(1.0) // TTS音量，范围0-1\n\n  // TTS音频队列\n  const ttsQueue = ref([])\n  const isProcessingQueue = ref(false)\n\n  // 上报API地址\n  const UPLOAD_PROGRESS_URL = `${baseUrl}/content/upload_progress`\n\n  // 初始化背景音乐播放器 (使用backgroundAudioManager)\n  const initBgAudioManager = () => {\n    if (!bgAudioManager.value) {\n      bgAudioManager.value = uni.getBackgroundAudioManager()\n\n      // 播放结束事件\n      bgAudioManager.value.onEnded(() => {\n        console.log('背景音乐播放结束')\n\n        // 如果设置了循环播放，则重新播放\n        if (bgLoop.value && currentBgUrl.value) {\n          console.log('背景音乐循环播放')\n          // 短暂延迟以避免可能的问题\n          setTimeout(() => {\n            playBgMusic(\n              currentBgUrl.value,\n              0,\n              bgSectionId.value,\n              bgAudioId.value\n            )\n          }, 100)\n        } else {\n          // 上报播放完成\n          reportBgMusicFinish()\n          bgIsPlaying.value = false\n        }\n      })\n\n      // 记录当前播放时间\n      bgAudioManager.value.onTimeUpdate(() => {\n        bgPlayTime.value = bgAudioManager.value.currentTime\n      })\n\n      // 错误处理\n      bgAudioManager.value.onError((err) => {\n        console.error('背景音乐播放错误', err)\n        bgIsPlaying.value = false\n      })\n\n      // 停止事件\n      bgAudioManager.value.onStop(() => {\n        console.log('背景音乐已停止')\n        bgIsPlaying.value = false\n      })\n\n      // 播放事件\n      bgAudioManager.value.onPlay(() => {\n        console.log('背景音乐开始播放')\n        bgIsPlaying.value = true\n      })\n\n      // 暂停事件\n      bgAudioManager.value.onPause(() => {\n        console.log('背景音乐已暂停')\n        bgIsPlaying.value = false\n      })\n    }\n  }\n\n  // 更新背景音乐属性\n  const updateBgMusicProperties = () => {\n    if (bgAudioManager.value) {\n      // 使用当前主题设置标题\n      bgAudioManager.value.title = musicTitle.value\n      bgAudioManager.value.epname = '小程序背景音乐'\n\n      // 如果需要可以设置封面\n      // bgAudioManager.value.coverImgUrl = '...';\n\n      console.log('更新背景音乐属性:', {\n        title: musicTitle.value,\n      })\n    }\n  }\n\n  // 初始化TTS音频播放器\n  const initTtsAudioContext = () => {\n    if (!ttsAudioContext.value) {\n      ttsAudioContext.value = uni.createInnerAudioContext()\n\n      // 设置初始音量\n      ttsAudioContext.value.volume = ttsVolume.value\n\n      // 播放结束事件\n      ttsAudioContext.value.onEnded(() => {\n        console.log('TTS音频播放结束', '队列长度:', ttsQueue.value.length)\n\n        // 上报播放完成\n        if (ttsSectionId.value && ttsAudioId.value) {\n          reportTtsFinish()\n        }\n\n        ttsIsPlaying.value = false\n\n        // 播放下一个队列中的音频\n        playNextInQueue()\n      })\n\n      // 错误处理\n      ttsAudioContext.value.onError((err) => {\n        console.error('TTS音频播放错误', err)\n        ttsIsPlaying.value = false\n\n        // 即使出错，也尝试播放下一个\n        playNextInQueue()\n      })\n\n      ttsAudioContext.value.onCanplay(() => {\n        console.log('TTS音频已准备好播放')\n        // 获取音频长度并存储\n        if (ttsAudioContext.value.duration > 0) {\n          ttsPlayTime.value = ttsAudioContext.value.duration\n          console.log('TTS音频长度:', ttsPlayTime.value)\n        }\n      })\n\n      ttsAudioContext.value.onPlay(() => {\n        console.log('TTS音频开始播放')\n      })\n\n      // 添加时间更新事件监听，确保能获取到音频长度\n      ttsAudioContext.value.onTimeUpdate(() => {\n        if (ttsAudioContext.value.duration > 0 && ttsPlayTime.value === 0) {\n          ttsPlayTime.value = ttsAudioContext.value.duration\n          console.log('更新TTS音频长度:', ttsPlayTime.value)\n        }\n      })\n    }\n  }\n\n  // 设置TTS音量\n  const setTtsVolume = (volume) => {\n    // 确保音量在0-1之间\n    volume = Math.min(1.0, Math.max(0.0, volume))\n    ttsVolume.value = volume\n\n    // 如果音频上下文已初始化，直接设置音量\n    if (ttsAudioContext.value) {\n      ttsAudioContext.value.volume = volume\n      console.log('TTS音量已设置为:', volume)\n    }\n\n    return volume // 返回实际设置的音量值\n  }\n\n  // 设置背景音乐音量\n  const setBgVolume = (volume) => {\n    // 确保音量在0-1之间\n    volume = Math.min(1.0, Math.max(0.0, volume))\n    bgVolume.value = volume\n\n    // 如果背景音乐管理器已初始化，直接设置音量\n    if (bgAudioManager.value) {\n      bgAudioManager.value.volume = volume\n      console.log('背景音乐音量已设置为:', volume)\n    }\n\n    return volume // 返回实际设置的音量值\n  }\n\n  // 设置背景音乐循环播放状态\n  const setBgLoop = (loop) => {\n    bgLoop.value = !!loop // 转为布尔值\n    console.log('背景音乐循环播放状态设置为:', bgLoop.value)\n    return bgLoop.value\n  }\n\n  // 播放背景音乐（使用backgroundAudioManager）\n  const playBgMusic = (url, playTime = 0, sectionId = null, audioId = null) => {\n    initBgAudioManager()\n\n    // 保存相关ID和URL（用于循环播放）\n    bgSectionId.value = sectionId\n    bgAudioId.value = audioId\n    bgPlayTime.value = playTime\n    currentBgUrl.value = url\n\n    // 更新背景音乐属性（使用当前主题）\n    updateBgMusicProperties()\n\n    // 设置音频源并播放\n    bgAudioManager.value.src = url\n\n    // 设置音量\n    bgAudioManager.value.volume = bgVolume.value\n\n    // 设置播放位置\n    if (playTime > 0) {\n      bgAudioManager.value.startTime = playTime\n    }\n\n    // backgroundAudioManager设置src后会自动播放\n    bgIsPlaying.value = true\n\n    console.log('开始播放背景音乐', {\n      url,\n      playTime,\n      sectionId,\n      audioId,\n      title: musicTitle.value,\n      volume: bgVolume.value,\n      loop: bgLoop.value,\n    })\n  }\n\n  // 暂停背景音乐\n  const pauseBgMusic = () => {\n    if (bgAudioManager.value && bgIsPlaying.value) {\n      bgAudioManager.value.pause()\n      bgIsPlaying.value = false\n      console.log('背景音乐已暂停')\n    }\n  }\n\n  // 恢复背景音乐播放\n  const resumeBgMusic = () => {\n    if (bgAudioManager.value && !bgIsPlaying.value && currentBgUrl.value) {\n      // 更新背景音乐属性（如果主题已变化）\n      updateBgMusicProperties()\n\n      // 如果已经创建了对象但未播放，尝试直接播放\n      try {\n        bgAudioManager.value.play()\n        bgIsPlaying.value = true\n        console.log('背景音乐恢复播放')\n      } catch (err) {\n        console.error('背景音乐恢复播放失败', err)\n        // 如果直接播放失败，尝试重新设置src\n        playBgMusic(\n          currentBgUrl.value,\n          bgPlayTime.value,\n          bgSectionId.value,\n          bgAudioId.value\n        )\n      }\n    } else if (currentBgUrl.value) {\n      // 如果没有创建对象或其他原因，重新播放\n      playBgMusic(\n        currentBgUrl.value,\n        bgPlayTime.value,\n        bgSectionId.value,\n        bgAudioId.value\n      )\n    }\n  }\n\n  // 将TTS音频添加到播放队列\n  const enqueueTtsAudio = (url, sectionId = null, audioId = null) => {\n    console.log('将TTS音频添加到队列', {\n      url,\n      sectionId,\n      audioId,\n      currentQueueLength: ttsQueue.value.length,\n    })\n\n    // 添加到队列\n    ttsQueue.value.push({\n      url,\n      sectionId,\n      audioId,\n    })\n\n    // 如果队列没有在处理中，则开始处理\n    if (!isProcessingQueue.value) {\n      playNextInQueue()\n    }\n  }\n\n  // 播放队列中的下一个TTS音频\n  const playNextInQueue = () => {\n    // 如果队列为空，重置处理状态\n    if (ttsQueue.value.length === 0) {\n      isProcessingQueue.value = false\n      console.log('TTS队列为空，等待新音频')\n      return\n    }\n\n    // 标记队列处理中\n    isProcessingQueue.value = true\n\n    // 取出队列中的第一个音频\n    const nextAudio = ttsQueue.value.shift()\n    console.log('播放队列中的下一个TTS音频', {\n      remainingInQueue: ttsQueue.value.length,\n      nextAudio,\n    })\n\n    // 播放该音频\n    playTtsAudioDirectly(nextAudio.url, nextAudio.sectionId, nextAudio.audioId)\n  }\n\n  // 直接播放TTS音频（内部使用，不要直接调用）\n  const playTtsAudioDirectly = (url, sectionId = null, audioId = null) => {\n    initTtsAudioContext()\n\n    // 保存相关ID\n    ttsSectionId.value = sectionId\n    ttsAudioId.value = audioId\n\n    // 重置音频长度，确保为新音频重新获取长度\n    ttsPlayTime.value = 0\n\n    // 设置音频源并播放\n    ttsAudioContext.value.src = url\n\n    // 确保使用当前设置的音量\n    ttsAudioContext.value.volume = ttsVolume.value\n\n    // 尝试播放\n    try {\n      ttsAudioContext.value.play()\n      ttsIsPlaying.value = true\n      console.log('正在播放TTS音频', {\n        url: url.substring(0, 50) + '...', // 只显示URL的一部分，避免日志太长\n        sectionId,\n        audioId,\n        volume: ttsVolume.value,\n      })\n    } catch (err) {\n      console.error('播放TTS音频失败', err)\n      // 继续下一个\n      setTimeout(playNextInQueue, 500)\n    }\n  }\n\n  // 外部接口：添加TTS音频到播放队列\n  const playTtsAudio = (url, sectionId = null, audioId = null) => {\n    // 将音频添加到队列\n    enqueueTtsAudio(url, sectionId, audioId)\n  }\n\n  // 暂停/恢复背景音乐（切换状态）\n  const toggleBgMusic = () => {\n    if (bgIsPlaying.value) {\n      pauseBgMusic()\n    } else {\n      resumeBgMusic()\n    }\n  }\n\n  // 暂停/恢复TTS音频\n  const toggleTtsAudio = () => {\n    if (!ttsAudioContext.value) return\n\n    if (ttsIsPlaying.value) {\n      ttsAudioContext.value.pause()\n      ttsIsPlaying.value = false\n    } else {\n      ttsAudioContext.value.play()\n      ttsIsPlaying.value = true\n    }\n  }\n\n  // 停止背景音乐\n  const stopBgMusic = () => {\n    if (bgAudioManager.value) {\n      bgAudioManager.value.stop()\n      bgIsPlaying.value = false\n    }\n  }\n\n  // 停止TTS音频\n  const stopTtsAudio = () => {\n    if (ttsAudioContext.value) {\n      ttsAudioContext.value.stop()\n      ttsIsPlaying.value = false\n    }\n\n    // 清空队列\n    ttsQueue.value = []\n    isProcessingQueue.value = false\n  }\n\n  // 停止所有音频\n  const stopAllAudio = () => {\n    stopBgMusic()\n    stopTtsAudio()\n  }\n\n  // 上报背景音乐播放完成\n  const reportBgMusicFinish = () => {\n    // 没有必要的ID就不上报\n    if (!bgSectionId.value && !bgAudioId.value) return\n\n    const reportData = {\n      section_id: bgSectionId.value,\n      audio_id: bgAudioId.value,\n      play_time: Number(bgPlayTime.value.toFixed(1)),\n      is_finish: true,\n    }\n\n    console.log('上报背景音乐播放完成', reportData)\n    // 设置为非电台模式\n    isRadioStore.setIsRadio(false)\n    // 使用HTTP请求上报\n    sendProgressReport(reportData)\n  }\n\n  // 上报TTS音频播放完成\n  const reportTtsFinish = () => {\n    // 没有必要的ID就不上报\n    if (!ttsSectionId.value && !ttsAudioId.value) return\n\n    const reportData = {\n      section_id: ttsSectionId.value,\n      audio_id: ttsAudioId.value,\n      is_finish: true,\n      play_time: Number(ttsPlayTime.value.toFixed(1)), // 添加play_time字段\n    }\n\n    console.log('上报TTS音频播放完成', reportData)\n\n    // 使用HTTP请求上报\n    sendProgressReport(reportData)\n  }\n\n  // 上报当前播放进度(App onHide时调用)\n  const reportCurrentProgress = () => {\n    // 如果背景音乐正在播放，上报当前进度\n    if (bgIsPlaying.value && bgSectionId.value && bgAudioId.value) {\n      const reportData = {\n        section_id: bgSectionId.value,\n        audio_id: bgAudioId.value,\n        play_time: Number(bgPlayTime.value.toFixed(1)),\n        is_finish: false,\n      }\n\n      console.log('上报背景音乐当前进度', reportData)\n      sendProgressReport(reportData)\n    }\n\n    // 如果TTS正在播放，上报其进度\n    if (ttsIsPlaying.value && ttsSectionId.value && ttsAudioId.value) {\n      const reportData = {\n        section_id: ttsSectionId.value,\n        audio_id: ttsAudioId.value,\n        is_finish: false,\n        play_time: Number(ttsPlayTime.value.toFixed(1)), // 添加play_time字段\n      }\n\n      console.log('上报TTS当前进度', reportData)\n      sendProgressReport(reportData)\n    }\n  }\n\n  // 发送上报请求\n  const sendProgressReport = (data) => {\n    const token = uni.getStorageSync('token')\n\n    uni.request({\n      url: UPLOAD_PROGRESS_URL,\n      method: 'POST',\n      header: {\n        'Content-Type': 'application/json',\n        Authorization: `bearer ${token}`,\n      },\n      data: data,\n      success: (res) => {\n        console.log('上报进度成功', res.data)\n      },\n      fail: (err) => {\n        console.error('上报进度失败', err)\n      },\n    })\n  }\n\n  // 获取队列状态信息（用于调试）\n  const getQueueStatus = () => {\n    return {\n      queueLength: ttsQueue.value.length,\n      isProcessing: isProcessingQueue.value,\n      currentlyPlaying: ttsIsPlaying.value\n        ? {\n            sectionId: ttsSectionId.value,\n            audioId: ttsAudioId.value,\n          }\n        : null,\n    }\n  }\n\n  // 清除TTS音频相关信息（重置TTS状态）\n  const resetTtsAudio = () => {\n    console.log('重置TTS音频状态')\n\n    // 如果正在播放，先停止\n    if (ttsIsPlaying.value && ttsAudioContext.value) {\n      ttsAudioContext.value.stop()\n    }\n\n    // 重置TTS相关状态\n    ttsSectionId.value = null\n    ttsAudioId.value = null\n    ttsIsPlaying.value = false\n    ttsPlayTime.value = 0\n\n    // 清空队列\n    ttsQueue.value = []\n    isProcessingQueue.value = false\n\n    // 保留音量设置，不重置ttsVolume.value\n\n    console.log('TTS音频状态已重置')\n  }\n\n  // 清除背景音乐相关信息（重置背景音乐状态）\n  const resetBgMusic = () => {\n    console.log('重置背景音乐状态')\n\n    // 如果正在播放，先停止\n    if (bgIsPlaying.value && bgAudioManager.value) {\n      bgAudioManager.value.stop()\n    }\n\n    // 重置背景音乐相关状态\n    bgSectionId.value = null\n    bgAudioId.value = null\n    bgIsPlaying.value = false\n    bgPlayTime.value = 0\n    currentBgUrl.value = ''\n\n    // 保留音量和循环设置，不重置bgVolume.value和bgLoop.value\n\n    console.log('背景音乐状态已重置')\n  }\n\n  return {\n    // 背景音乐相关\n    playBgMusic,\n    stopBgMusic,\n    pauseBgMusic,\n    resumeBgMusic,\n    toggleBgMusic,\n    bgIsPlaying,\n    setBgVolume,\n    bgVolume,\n    setBgLoop,\n    bgLoop,\n    musicTitle, // 导出计算属性，便于UI显示\n    resetBgMusic, // 新增：重置背景音乐\n\n    // TTS相关\n    playTtsAudio,\n    stopTtsAudio,\n    toggleTtsAudio,\n    ttsIsPlaying,\n    setTtsVolume,\n    ttsVolume,\n    getQueueStatus,\n    resetTtsAudio, // 新增：重置TTS音频\n\n    // 通用方法\n    stopAllAudio,\n    reportCurrentProgress,\n\n    // 播放状态\n    get isAnyPlaying() {\n      return bgIsPlaying.value || ttsIsPlaying.value\n    },\n\n    // 队列长度（便于调试显示）\n    get queueLength() {\n      return ttsQueue.value.length\n    },\n  }\n})\n"],"mappings":"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","ignoreList":[]}