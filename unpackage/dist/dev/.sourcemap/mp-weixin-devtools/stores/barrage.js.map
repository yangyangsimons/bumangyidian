{"version":3,"names":["useBarrageStore","common_vendor","defineStore","state","messages","currentStreamingMessageId","actions","addMessage","payload","messageId","Date","now","isStreaming","push","_objectSpread2","id","timestamp","toISOString","index","__f__","appendToStreamingMessage","text","_this","startNewStreamingMessage","msgIndex","findIndex","msg","content","type","finishStreamingMessage","fullText","_this2","clearMessages","messageProcessorStore","useMessageProcessorStore","resetProcessor"],"sources":["barrage.js"],"sourcesContent":["// stores/barrage.js\nimport { defineStore } from 'pinia'\n\nexport const useBarrageStore = defineStore('barrage', {\n  state: () => ({\n    messages: [],\n\n    //用户跟踪当前流式消息的ID\n    currentStreamingMessageId: null,\n  }),\n  actions: {\n    addMessage(payload) {\n      const messageId = Date.now()\n      // 如果消息类型是流式消息\n      if (payload.isStreaming) {\n        this.currentStreamingMessageId = messageId\n      }\n\n      this.messages.push({\n        ...payload,\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n      })\n      console.log('所有消息', this.messages)\n      return messageId // 返回消息ID\n    },\n\n    appendToStreamingMessage(text) {\n      if (!this.currentStreamingMessageId) {\n        // 如果没有正在进行的流式消息，创建一个新的\n        this.startNewStreamingMessage()\n      }\n\n      const msgIndex = this.messages.findIndex(\n        (msg) => msg.id === this.currentStreamingMessageId\n      )\n\n      if (msgIndex !== -1) {\n        this.messages[msgIndex].content += text\n      } else {\n        // 如果找不到消息，创建新的\n        this.currentStreamingMessageId = this.addMessage({\n          type: 'ai',\n          content: text,\n          isStreaming: true,\n        })\n      }\n    },\n    // 完成流式消息\n    finishStreamingMessage(fullText) {\n      if (this.currentStreamingMessageId) {\n        const msgIndex = this.messages.findIndex(\n          (msg) => msg.id === this.currentStreamingMessageId\n        )\n        if (msgIndex !== -1 && fullText) {\n          // 替换为完整内容\n          this.messages[msgIndex].content = fullText\n        }\n        // 标记不再是流式消息\n        if (msgIndex !== -1) {\n          this.messages[msgIndex].isStreaming = false\n        }\n      }\n      this.currentStreamingMessageId = null\n    },\n    startNewStreamingMessage() {\n      // 创建一个新的流式消息\n      this.currentStreamingMessageId = this.addMessage({\n        type: 'ai',\n        content: '',\n        isStreaming: true,\n      })\n      return this.currentStreamingMessageId\n    },\n    // 清除所有消息\n    clearMessages() {\n      this.messages = []\n      this.currentStreamingMessageId = null\n\n      // 重置 messageProcessor 中的状态\n      const messageProcessorStore = useMessageProcessorStore()\n      messageProcessorStore.resetProcessor()\n    },\n  },\n})\n"],"mappings":";;;;;AAGY,IAACA,eAAA,GAAkBC,aAAA,CAAWC,WAAA,CAAC,WAAW;EACpDC,KAAA,EAAO,SAAPA,MAAA;IAAA,OAAc;MACZC,QAAA,EAAU,EAAE;MAAA;MAGZC,yBAAA,EAA2B;IAC/B;EAAA;EACEC,OAAA,EAAS;IACPC,UAAA,WAAAA,WAAWC,OAAA,EAAS;MAClB,IAAMC,SAAA,GAAYC,IAAA,CAAKC,GAAA,EAAK;MAE5B,IAAIH,OAAA,CAAQI,WAAA,EAAa;QACvB,KAAKP,yBAAA,GAA4BI,SAAA;MAClC;MAED,KAAKL,QAAA,CAASS,IAAA,CAAAC,cAAA,CAAAA,cAAA,KACTN,OAAA;QACHO,EAAA,EAAIL,IAAA,CAAKC,GAAA,EAAK;QACdK,SAAA,EAAW,mBAAIN,IAAA,EAAM,CAACO,WAAA;MAAa,GACpC;MACDhB,aAAA,CAAYiB,KAAA,CAAAC,KAAA,2CAAQ,KAAKf,QAAQ;MACjC,OAAOK,SAAA;IACR;IAEDW,wBAAA,WAAAA,yBAAyBC,IAAA,EAAM;MAAA,IAAAC,KAAA;MAC7B,IAAI,CAAC,KAAKjB,yBAAA,EAA2B;QAEnC,KAAKkB,wBAAA,EAA0B;MAChC;MAED,IAAMC,QAAA,GAAW,KAAKpB,QAAA,CAASqB,SAAA,CAC7B,UAACC,GAAA;QAAA,OAAQA,GAAA,CAAIX,EAAA,KAAOO,KAAA,CAAKjB,yBAAA;MAAA,EAC1B;MAED,IAAImB,QAAA,KAAa,IAAI;QACnB,KAAKpB,QAAA,CAASoB,QAAQ,EAAEG,OAAA,IAAWN,IAAA;MAC3C,OAAa;QAEL,KAAKhB,yBAAA,GAA4B,KAAKE,UAAA,CAAW;UAC/CqB,IAAA,EAAM;UACND,OAAA,EAASN,IAAA;UACTT,WAAA,EAAa;QACvB,CAAS;MACF;IACF;IAAA;IAEDiB,sBAAA,WAAAA,uBAAuBC,QAAA,EAAU;MAAA,IAAAC,MAAA;MAC/B,IAAI,KAAK1B,yBAAA,EAA2B;QAClC,IAAMmB,QAAA,GAAW,KAAKpB,QAAA,CAASqB,SAAA,CAC7B,UAACC,GAAA;UAAA,OAAQA,GAAA,CAAIX,EAAA,KAAOgB,MAAA,CAAK1B,yBAAA;QAAA,EAC1B;QACD,IAAImB,QAAA,KAAa,MAAMM,QAAA,EAAU;UAE/B,KAAK1B,QAAA,CAASoB,QAAQ,EAAEG,OAAA,GAAUG,QAAA;QACnC;QAED,IAAIN,QAAA,KAAa,IAAI;UACnB,KAAKpB,QAAA,CAASoB,QAAQ,EAAEZ,WAAA,GAAc;QACvC;MACF;MACD,KAAKP,yBAAA,GAA4B;IAClC;IACDkB,wBAAA,WAAAA,yBAAA,EAA2B;MAEzB,KAAKlB,yBAAA,GAA4B,KAAKE,UAAA,CAAW;QAC/CqB,IAAA,EAAM;QACND,OAAA,EAAS;QACTf,WAAA,EAAa;MACrB,CAAO;MACD,OAAO,KAAKP,yBAAA;IACb;IAAA;IAED2B,aAAA,WAAAA,cAAA,EAAgB;MACd,KAAK5B,QAAA,GAAW,EAAE;MAClB,KAAKC,yBAAA,GAA4B;MAGjC,IAAM4B,qBAAA,GAAwBC,wBAAA,EAA0B;MACxDD,qBAAA,CAAsBE,cAAA,EAAgB;IACvC;EACF;AACH,CAAC","ignoreList":[]}