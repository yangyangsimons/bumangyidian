{"version":3,"file":"websocket.js","sources":["stores/websocket.js"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref } from 'vue'\nimport { wsUrl } from '../utils/config'\nimport { useBarrageStore } from './barrage'\nimport { useMessageProcessorStore } from './messageProcessor'\n\nexport const useWebSocketStore = defineStore('websocket', () => {\n  const messages = ref([])\n  let socketTask = null\n  const isConnected = ref(false)\n  const isConnecting = ref(false) // 新增：标记是否正在连接中\n  const messageQueue = ref([]) // 用于存储连接前的消息\n\n  // 新增：上一次关闭的时间戳，用于防止频繁切换\n  const lastCloseTime = ref(0)\n\n  // 在store内部获取barrageStore实例\n  const barrageStore = useBarrageStore()\n  const messageProcessor = useMessageProcessorStore()\n\n  // 确保WebSocket完全关闭\n  const ensureSocketClosed = () => {\n    return new Promise((resolve) => {\n      if (!socketTask) {\n        resolve()\n        return\n      }\n\n      // 如果已连接状态，正常关闭\n      if (isConnected.value) {\n        socketTask.close({\n          success: () => {\n            console.log('WebSocket正常关闭')\n            socketTask = null\n            isConnected.value = false\n            lastCloseTime.value = Date.now()\n            resolve()\n          },\n          fail: (err) => {\n            console.error('WebSocket关闭失败', err)\n            // 即使关闭失败，也认为连接已关闭\n            socketTask = null\n            isConnected.value = false\n            lastCloseTime.value = Date.now()\n            resolve()\n          },\n        })\n      } else {\n        // 如果不是已连接状态，直接置空\n        socketTask = null\n        isConnected.value = false\n        lastCloseTime.value = Date.now()\n        resolve()\n      }\n    })\n  }\n\n  const connect = async () => {\n    // 如果已经连接，直接返回\n    if (isConnected.value && socketTask) {\n      console.log('WebSocket已经连接，无需重连')\n      return\n    }\n\n    // 如果正在连接中，等待连接完成\n    if (isConnecting.value) {\n      console.log('WebSocket正在连接中，请稍候')\n      throw new Error('连接正在进行中，请勿重复连接')\n    }\n\n    // 检查上次关闭时间，防止频繁连接\n    const now = Date.now()\n    if (now - lastCloseTime.value < 1000) {\n      console.log('连接过于频繁，请稍后再试')\n      throw new Error('连接过于频繁，请稍后再试')\n    }\n\n    try {\n      isConnecting.value = true\n\n      // 确保之前的连接已完全关闭\n      await ensureSocketClosed()\n\n      return new Promise((resolve, reject) => {\n        const token = uni.getStorageSync('token')\n\n        // 检查当前WebSocket连接数量\n        uni.getNetworkType({\n          success: function (res) {\n            console.log('当前网络类型:', res.networkType)\n            if (res.networkType === 'none') {\n              isConnecting.value = false\n              reject(new Error('当前无网络连接'))\n              return\n            }\n\n            // 创建新的WebSocket连接\n            try {\n              socketTask = uni.connectSocket({\n                url: `${wsUrl}/content/ws`,\n                header: { Authorization: `bearer ${token}` },\n                success: () => {\n                  console.log('WebSocket连接请求已发送')\n                },\n                fail: (err) => {\n                  console.error('WebSocket连接请求失败', err)\n                  isConnecting.value = false\n                  reject(err)\n                },\n              })\n\n              // 设置连接超时\n              const connectTimeout = setTimeout(() => {\n                if (!isConnected.value && isConnecting.value) {\n                  console.error('WebSocket连接超时')\n                  if (socketTask) {\n                    socketTask.close()\n                    socketTask = null\n                  }\n                  isConnecting.value = false\n                  reject(new Error('WebSocket连接超时'))\n                }\n              }, 10000) // 10秒超时\n\n              socketTask.onOpen(() => {\n                console.log('WebSocket连接已打开')\n                clearTimeout(connectTimeout)\n                isConnected.value = true\n                isConnecting.value = false\n\n                // 延迟一点再处理消息队列，确保连接稳定\n                setTimeout(() => {\n                  // 处理排队的消息\n                  while (messageQueue.value.length > 0) {\n                    _doSendMessage(messageQueue.value.shift())\n                  }\n                  resolve()\n                }, 300)\n              })\n\n              socketTask.onMessage((res) => {\n                console.log('WebSocket收到消息:', res.data)\n                // 交由消息处理器处理\n                messageProcessor.processMessage(res.data)\n              })\n\n              socketTask.onError((err) => {\n                console.error('WebSocket发生错误:', err)\n                clearTimeout(connectTimeout)\n                isConnected.value = false\n                isConnecting.value = false\n                socketTask = null\n                reject(err)\n              })\n\n              socketTask.onClose(() => {\n                console.log('WebSocket连接已关闭......')\n                isConnected.value = false\n                isConnecting.value = false\n                socketTask = null\n              })\n            } catch (error) {\n              console.error('创建WebSocket连接出错:', error)\n              isConnecting.value = false\n              reject(error)\n            }\n          },\n          fail: function (err) {\n            console.error('获取网络类型失败:', err)\n            isConnecting.value = false\n            reject(new Error('无法获取网络类型'))\n          },\n        })\n      })\n    } catch (error) {\n      isConnecting.value = false\n      throw error\n    }\n  }\n\n  const _doSendMessage = (message) => {\n    return new Promise((resolve, reject) => {\n      if (!socketTask || !isConnected.value) {\n        reject(new Error('WebSocket未连接'))\n        return\n      }\n\n      socketTask.send({\n        data: JSON.stringify(message),\n        success: () => {\n          console.log('WebSocket消息发送成功')\n          resolve()\n        },\n        fail: (err) => {\n          console.error('WebSocket消息发送失败', err)\n          reject(err)\n        },\n      })\n    })\n  }\n\n  const sendMessage = async (message) => {\n    // 如果未连接，将消息加入队列\n    if (!isConnected.value || !socketTask) {\n      console.log('WebSocket未连接，消息加入队列')\n      messageQueue.value.push(message)\n      return Promise.reject(new Error('WebSocket未连接，消息加入队列'))\n    }\n\n    return _doSendMessage(message)\n  }\n\n  const close = async () => {\n    return ensureSocketClosed()\n  }\n\n  return { messages, connect, sendMessage, close, isConnected, isConnecting }\n})\n"],"names":["defineStore","ref","useBarrageStore","useMessageProcessorStore","uni","wsUrl","res"],"mappings":"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"}