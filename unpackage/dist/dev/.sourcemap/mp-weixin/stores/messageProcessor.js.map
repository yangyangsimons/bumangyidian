{"version":3,"file":"messageProcessor.js","sources":["stores/messageProcessor.js"],"sourcesContent":["// stores/messageProcessor.js\nimport { defineStore } from 'pinia'\nimport { useBarrageStore } from './barrage'\nimport { useAudioPlayerStore } from './audioPlayer'\nimport { ref } from 'vue'\nimport { useSendStore } from './send'\nimport { useIsRadioStore } from './isRadio'\n\nexport const useMessageProcessorStore = defineStore('messageProcessor', () => {\n  const barrageStore = useBarrageStore()\n  const audioPlayerStore = useAudioPlayerStore()\n  const sendStore = useSendStore()\n  const isRadioStore = useIsRadioStore()\n\n  // 处理接收到的流式消息\n  const isStreaming = ref(false)\n  const accumulatedText = ref('')\n  const lastSectionId = ref(null)\n\n  // 添加歌词相关状态\n  const lyricSyncInterval = ref(null)\n  const currentLyrics = ref([])\n  const lyricMessageId = ref(null)\n  const currentLyricIndex = ref(-1)\n\n  // 处理接收到的消息\n  const processMessage = (data) => {\n    // 如果是字符串，先尝试解析为JSON\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data)\n      } catch (e) {\n        console.error('消息解析失败', e)\n        // 作为纯文本消息处理\n        showTextMessage(data)\n        return\n      }\n    }\n\n    // 根据cmd类型处理不同消息\n    switch (data.cmd) {\n      case 'bg_music':\n        handleBgMusic(data)\n        break\n      case 'audio':\n        handleTtsAudio(data)\n        break\n      case 'finish':\n        handleFinishMessage(data)\n        break\n      case 'subject':\n        handleSubjectRequest(data)\n        break\n      case 'error':\n        handleErrorMessage(data)\n        break\n      default:\n        // 未知消息类型，尝试作为文本显示\n        console.warn('未知消息类型', data)\n        if (data.text || data.msg) {\n          showTextMessage(data.text || data.msg)\n        }\n    }\n  }\n\n  // 处理背景音乐消息\n  const handleBgMusic = (data) => {\n    console.log('收到背景音乐消息', data)\n    const { audio_url, play_time, section_id, audio_id } = data\n\n    // 播放背景音乐\n    audioPlayerStore.playBgMusic(audio_url, play_time, section_id, audio_id)\n\n    // 设置背景音乐循环播放\n    audioPlayerStore.setBgLoop(true)\n\n    // 是不是广播模式\n    if (data.is_radio && data.is_radio == 1) {\n      console.log('当前是广播模式')\n      isRadioStore.setIsRadio(true)\n      audioPlayerStore.setBgLoop(false) // 设置为不循环播放\n\n      // 处理歌词\n      if (data.lrc) {\n        console.log('当前是广播模式,歌词:', data.lrc)\n        handleLyrics(data.lrc, play_time || 0)\n      }\n    }\n\n    // 可以选择是否在对话界面显示音乐播放信息\n    // barrageStore.addMessage({\n    //   type: 'system',\n    //   content: '🎵 背景音乐播放中...',\n    //   showInUI: false, // 如果不想在界面显示，可以设置标记\n    // })\n  }\n\n  // 处理歌词数据\n  const handleLyrics = (lyricsData, play_time) => {\n    // 停止之前可能存在的歌词同步\n    stopLyricSync()\n\n    // 保存歌词数据以便后续使用\n    currentLyrics.value = lyricsData\n    currentLyricIndex.value = -1\n\n    // 启动歌词同步\n    startLyricSync(lyricsData, play_time)\n  }\n\n  // 启动歌词同步\n  // 启动歌词同步\n  const startLyricSync = (lyricsData, play_time) => {\n    // 先停止之前可能存在的同步\n    stopLyricSync()\n\n    // 解析时间格式，将歌词数据处理成更易于使用的格式\n    const parsedLyrics = lyricsData.map((item) => ({\n      text: item.text,\n      startTime: parseTimeToSeconds(item.start),\n    }))\n\n    console.log('解析后的歌词数据:', parsedLyrics)\n\n    // 设置同步定时器\n    lyricSyncInterval.value = setInterval(() => {\n      if (audioPlayerStore.bgIsPlaying) {\n        const currentTime = audioPlayerStore.bgPlayTime\n        updateLyricByTime(currentTime, parsedLyrics, play_time)\n      }\n    }, 1000) // 每100毫秒检查一次\n  }\n\n  // 停止歌词同步\n  const stopLyricSync = () => {\n    if (lyricSyncInterval.value) {\n      clearInterval(lyricSyncInterval.value)\n      lyricSyncInterval.value = null\n    }\n  }\n\n  // 根据当前时间更新歌词显示\n  const updateLyricByTime = (currentTime, lyrics, play_time) => {\n    // 找出当前应该显示的歌词\n    let newIndex = -1\n\n    for (let i = 0; i < lyrics.length; i++) {\n      if (currentTime >= lyrics[i].startTime) {\n        newIndex = i\n      } else {\n        // 找到比当前时间大的就停止，因为歌词是按时间排序的\n        break\n      }\n    }\n\n    // 如果找到有效的歌词且与当前显示的不同，更新显示\n    if (newIndex !== -1 && newIndex !== currentLyricIndex.value) {\n      currentLyricIndex.value = newIndex\n      console.log('当前歌词索引:', newIndex)\n      if (play_time != 0 && currentTime == 0) {\n        console.log(currentTime, '当前时间:', currentTime)\n      } else {\n        // 修改这里：不是更新现有歌词，而是添加新的歌词消息\n        addLyricMessage(lyrics[newIndex].text)\n      }\n    }\n  }\n\n  // 更新歌词显示\n  // 添加新的歌词消息 (新增函数)\n  const addLyricMessage = (text) => {\n    // 创建新的歌词消息，而不是更新现有消息\n    barrageStore.addMessage({\n      type: 'lyric',\n      content: text,\n      isLyric: true,\n    })\n\n    console.log('添加新歌词:', text)\n  }\n\n  // 将时间字符串转换为秒数\n  const parseTimeToSeconds = (timeStr) => {\n    if (!timeStr) return 0\n\n    const parts = timeStr.split(':')\n    let seconds = 0\n\n    if (parts.length === 3) {\n      // 格式为 \"h:mm:ss.ms\"\n      seconds =\n        parseInt(parts[0]) * 3600 +\n        parseInt(parts[1]) * 60 +\n        parseFloat(parts[2])\n    } else if (parts.length === 2) {\n      // 格式为 \"m:ss.ms\"\n      seconds = parseInt(parts[0]) * 60 + parseFloat(parts[1])\n    } else {\n      // 格式为 \"ss.ms\"\n      seconds = parseFloat(parts[0])\n    }\n\n    return seconds\n  }\n\n  // 处理TTS音频消息\n  const handleTtsAudio = (data) => {\n    console.log('收到TTS音频消息', data)\n    if (data.is_radio && data.is_radio == 1) {\n      console.log('当前是广播模式')\n      isRadioStore.setIsRadio(true)\n    }\n    const { audio_url, section_id, audio_id, text } = data\n    //设置为不能发送消息\n    sendStore.setSend(false)\n    // 记录当前处理的section_id\n    lastSectionId.value = section_id\n\n    // // 播放TTS音频\n    audioPlayerStore.playTtsAudio(audio_url, section_id, audio_id)\n    if (text) {\n      console.log('处理文本:')\n\n      // 如果是新的对话或新的section，开始新的流式消息\n      if (!isStreaming.value || lastSectionId.value !== section_id) {\n        console.log('开始新的流式消息', {\n          isStreaming: isStreaming.value,\n          lastSectionId: lastSectionId.value,\n          newSectionId: section_id,\n        })\n        isStreaming.value = true\n        accumulatedText.value = ''\n        barrageStore.startNewStreamingMessage()\n      }\n\n      // 累积文本\n      accumulatedText.value += text\n\n      // 向弹幕添加文本\n      barrageStore.appendToStreamingMessage(text)\n\n      console.log('当前累积文本:', accumulatedText.value)\n    }\n  }\n\n  // 处理结束消息\n  const handleFinishMessage = (data) => {\n    console.log('收到结束消息', data)\n    // 设置可以发送消息\n    sendStore.setSend(true)\n    const { full_text } = data\n\n    // 如果有full_text，用它替换累积的文本\n    if (full_text) {\n      accumulatedText.value = full_text\n    }\n\n    // 结束流式消息，使用累积的文本或full_text\n    barrageStore.finishStreamingMessage(full_text || accumulatedText.value)\n\n    // 重置流式状态\n    isStreaming.value = false\n    accumulatedText.value = ''\n  }\n\n  // 处理主题选择请求\n  const handleSubjectRequest = (data) => {\n    console.log('收到主题选择请求', data)\n    const subjects = data.subjects.join('\\n')\n    console.log('可选主题列表', subjects)\n    // 显示可选主题列表\n    barrageStore.addMessage({\n      type: 'subject',\n      content: data.msg + '\\n' + subjects,\n    })\n  }\n\n  // 处理错误消息\n  const handleErrorMessage = (data) => {\n    console.log('收到错误消息', data)\n    const { text } = data\n\n    // 显示错误信息\n    uni.showToast({\n      title: text || '系统错误',\n      icon: 'none',\n      duration: 2000,\n    })\n  }\n\n  // 通用显示文本消息\n  const showTextMessage = (text, type = 'ai') => {\n    if (!text) return\n\n    barrageStore.addMessage({\n      type: type,\n      content: text,\n    })\n  }\n\n  // 添加一个重置方法\n  const resetProcessor = () => {\n    isStreaming.value = false\n    accumulatedText.value = ''\n    lastSectionId.value = null\n\n    // 停止歌词同步\n    stopLyricSync()\n    currentLyrics.value = []\n    lyricMessageId.value = null\n    currentLyricIndex.value = -1\n  }\n\n  return {\n    processMessage,\n    resetProcessor,\n    isStreaming,\n    accumulatedText,\n\n    // 暴露歌词相关方法（如果需要在外部调用）\n    stopLyricSync,\n    currentLyrics,\n    currentLyricIndex,\n  }\n})\n"],"names":["defineStore","useBarrageStore","useAudioPlayerStore","useSendStore","useIsRadioStore","ref","uni"],"mappings":"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"}