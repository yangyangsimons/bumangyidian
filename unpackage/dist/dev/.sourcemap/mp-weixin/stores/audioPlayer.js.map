{"version":3,"file":"audioPlayer.js","sources":["stores/audioPlayer.js"],"sourcesContent":["// stores/audioPlayer.js\nimport { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { baseUrl } from '../utils/config'\nimport { useSubjectStore } from './subject' // 导入主题store\nimport { useIsRadioStore } from './isRadio'\nimport { useMessageProcessorStore } from './messageProcessor' // 导入messageProcessor\n\nexport const useAudioPlayerStore = defineStore('audioPlayer', () => {\n  // 获取主题store\n  const subjectStore = useSubjectStore()\n  const isRadioStore = useIsRadioStore()\n\n  // 背景音乐相关状态\n  const bgAudioManager = ref(null)\n  const bgSectionId = ref(null)\n  const bgAudioId = ref(null)\n  const bgPlayTime = ref(0)\n  const bgIsPlaying = ref(false)\n  const bgVolume = ref(1.0) // 背景音乐音量，范围0-1\n  const bgLoop = ref(false) // 是否循环播放背景音乐\n  const currentBgUrl = ref('') // 当前背景音乐URL，用于循环播放时重新播放\n\n  // 计算属性：获取当前音乐标题（基于主题）\n  const musicTitle = computed(() => {\n    return `${subjectStore.subject}`\n  })\n\n  // TTS相关状态\n  const ttsAudioContext = ref(null)\n  const ttsSectionId = ref(null)\n  const ttsAudioId = ref(null)\n  const ttsIsPlaying = ref(false)\n  const ttsPlayTime = ref(0)\n  const ttsVolume = ref(1.0) // TTS音量，范围0-1\n  const ttsPaused = ref(false) // 新增：TTS是否被暂停（与停止不同）\n  const currentTtsUrl = ref('') // 新增：当前TTS音频URL，用于恢复播放\n\n  // TTS音频队列\n  const ttsQueue = ref([])\n  const isProcessingQueue = ref(false)\n\n  // 上报API地址\n  const UPLOAD_PROGRESS_URL = `${baseUrl}/content/upload_progress`\n\n  // 初始化背景音乐播放器 (使用backgroundAudioManager)\n  const initBgAudioManager = () => {\n    if (!bgAudioManager.value) {\n      bgAudioManager.value = uni.getBackgroundAudioManager()\n\n      // 播放结束事件\n      bgAudioManager.value.onEnded(() => {\n        console.log('背景音乐播放结束')\n\n        // 如果设置了循环播放，则重新播放\n        if (bgLoop.value && currentBgUrl.value) {\n          console.log('背景音乐循环播放')\n          // 短暂延迟以避免可能的问题\n          setTimeout(() => {\n            playBgMusic(\n              currentBgUrl.value,\n              0,\n              bgSectionId.value,\n              bgAudioId.value\n            )\n          }, 100)\n        } else {\n          // 上报播放完成\n          reportBgMusicFinish()\n          bgIsPlaying.value = false\n\n          // 停止歌词同步\n          try {\n            const messageProcessorStore = useMessageProcessorStore()\n            if (messageProcessorStore && messageProcessorStore.stopLyricSync) {\n              messageProcessorStore.stopLyricSync()\n            }\n          } catch (err) {\n            console.error('停止歌词同步失败', err)\n          }\n        }\n      })\n\n      // 记录当前播放时间\n      bgAudioManager.value.onTimeUpdate(() => {\n        bgPlayTime.value = bgAudioManager.value.currentTime\n      })\n\n      // 错误处理\n      bgAudioManager.value.onError((err) => {\n        console.error('背景音乐播放错误', err)\n        bgIsPlaying.value = false\n\n        // 发生错误时停止歌词同步\n        try {\n          const messageProcessorStore = useMessageProcessorStore()\n          if (messageProcessorStore && messageProcessorStore.stopLyricSync) {\n            messageProcessorStore.stopLyricSync()\n          }\n        } catch (err) {\n          console.error('停止歌词同步失败', err)\n        }\n      })\n\n      // 停止事件\n      bgAudioManager.value.onStop(() => {\n        console.log('背景音乐已停止')\n        bgIsPlaying.value = false\n\n        // 背景音乐停止时停止歌词同步\n        try {\n          const messageProcessorStore = useMessageProcessorStore()\n          if (messageProcessorStore && messageProcessorStore.stopLyricSync) {\n            messageProcessorStore.stopLyricSync()\n          }\n        } catch (err) {\n          console.error('停止歌词同步失败', err)\n        }\n      })\n\n      // 播放事件\n      bgAudioManager.value.onPlay(() => {\n        console.log('背景音乐开始播放')\n        bgIsPlaying.value = true\n      })\n\n      // 暂停事件\n      bgAudioManager.value.onPause(() => {\n        console.log('背景音乐已暂停')\n        bgIsPlaying.value = false\n      })\n    }\n  }\n\n  // 更新背景音乐属性\n  const updateBgMusicProperties = () => {\n    if (bgAudioManager.value) {\n      // 使用当前主题设置标题\n      bgAudioManager.value.title = musicTitle.value\n      bgAudioManager.value.epname = '小程序背景音乐'\n\n      // 如果需要可以设置封面\n      bgAudioManager.value.coverImgUrl = '../../static/logo.png'\n\n      console.log('更新背景音乐属性:', {\n        title: musicTitle.value,\n      })\n    }\n  }\n\n  // 初始化TTS音频播放器\n  const initTtsAudioContext = () => {\n    if (!ttsAudioContext.value) {\n      ttsAudioContext.value = uni.createInnerAudioContext()\n\n      // 设置初始音量\n      ttsAudioContext.value.volume = ttsVolume.value\n\n      // 播放结束事件\n      ttsAudioContext.value.onEnded(() => {\n        console.log('TTS音频播放结束', '队列长度:', ttsQueue.value.length)\n\n        // 上报播放完成\n        if (ttsSectionId.value && ttsAudioId.value) {\n          reportTtsFinish()\n        }\n\n        ttsIsPlaying.value = false\n        ttsPaused.value = false // 重置暂停状态\n\n        // 播放下一个队列中的音频\n        playNextInQueue()\n      })\n\n      // 错误处理\n      ttsAudioContext.value.onError((err) => {\n        console.error('TTS音频播放错误', err)\n        ttsIsPlaying.value = false\n        ttsPaused.value = false // 重置暂停状态\n\n        // 即使出错，也尝试播放下一个\n        playNextInQueue()\n      })\n\n      ttsAudioContext.value.onCanplay(() => {\n        console.log('TTS音频已准备好播放')\n        // 获取音频长度并存储\n        if (ttsAudioContext.value.duration > 0) {\n          ttsPlayTime.value = ttsAudioContext.value.duration\n          console.log('TTS音频长度:', ttsPlayTime.value)\n        }\n      })\n\n      ttsAudioContext.value.onPlay(() => {\n        console.log('TTS音频开始播放')\n        ttsIsPlaying.value = true\n        ttsPaused.value = false // 重置暂停状态\n      })\n\n      // 添加时间更新事件监听，确保能获取到音频长度\n      ttsAudioContext.value.onTimeUpdate(() => {\n        if (ttsAudioContext.value.duration > 0 && ttsPlayTime.value === 0) {\n          ttsPlayTime.value = ttsAudioContext.value.duration\n          console.log('更新TTS音频长度:', ttsPlayTime.value)\n        }\n      })\n\n      // 添加暂停事件监听\n      ttsAudioContext.value.onPause(() => {\n        console.log('TTS音频已暂停')\n        ttsIsPlaying.value = false\n        ttsPaused.value = true // 设置暂停状态\n      })\n    }\n  }\n\n  // 设置TTS音量\n  const setTtsVolume = (volume) => {\n    // 确保音量在0-1之间\n    volume = Math.min(1.0, Math.max(0.0, volume))\n    ttsVolume.value = volume\n\n    // 如果音频上下文已初始化，直接设置音量\n    if (ttsAudioContext.value) {\n      ttsAudioContext.value.volume = volume\n      console.log('TTS音量已设置为:', volume)\n    }\n\n    return volume // 返回实际设置的音量值\n  }\n\n  // 设置背景音乐音量\n  const setBgVolume = (volume) => {\n    // 确保音量在0-1之间\n    volume = Math.min(1.0, Math.max(0.0, volume))\n    bgVolume.value = volume\n\n    // 如果背景音乐管理器已初始化，直接设置音量\n    if (bgAudioManager.value) {\n      bgAudioManager.value.volume = volume\n      console.log('背景音乐音量已设置为:', volume)\n    }\n\n    return volume // 返回实际设置的音量值\n  }\n\n  // 设置背景音乐循环播放状态\n  const setBgLoop = (loop) => {\n    bgLoop.value = !!loop // 转为布尔值\n    console.log('背景音乐循环播放状态设置为:', bgLoop.value)\n    return bgLoop.value\n  }\n\n  // 播放背景音乐（使用backgroundAudioManager）\n  const playBgMusic = (url, playTime = 0, sectionId = null, audioId = null) => {\n    initBgAudioManager()\n\n    // 保存相关ID和URL（用于循环播放）\n    bgSectionId.value = sectionId\n    bgAudioId.value = audioId\n    bgPlayTime.value = playTime\n    currentBgUrl.value = url\n\n    // 更新背景音乐属性（使用当前主题）\n    updateBgMusicProperties()\n\n    // 设置音频源并播放\n    bgAudioManager.value.src = url\n\n    // 设置音量\n    bgAudioManager.value.volume = bgVolume.value\n\n    // 设置播放位置\n    if (playTime > 0) {\n      bgAudioManager.value.startTime = playTime\n    }\n\n    // backgroundAudioManager设置src后会自动播放\n    bgIsPlaying.value = true\n\n    console.log('开始播放背景音乐', {\n      url,\n      playTime,\n      sectionId,\n      audioId,\n      title: musicTitle.value,\n      volume: bgVolume.value,\n      loop: bgLoop.value,\n    })\n  }\n\n  // 暂停背景音乐\n  const pauseBgMusic = () => {\n    if (bgAudioManager.value && bgIsPlaying.value) {\n      bgAudioManager.value.pause()\n      bgIsPlaying.value = false\n      console.log('背景音乐已暂停')\n    }\n  }\n\n  // 恢复背景音乐播放\n  const resumeBgMusic = () => {\n    if (bgAudioManager.value && !bgIsPlaying.value && currentBgUrl.value) {\n      // 更新背景音乐属性（如果主题已变化）\n      updateBgMusicProperties()\n\n      // 如果已经创建了对象但未播放，尝试直接播放\n      try {\n        bgAudioManager.value.play()\n        bgIsPlaying.value = true\n        console.log('背景音乐恢复播放')\n      } catch (err) {\n        console.error('背景音乐恢复播放失败', err)\n        // 如果直接播放失败，尝试重新设置src\n        playBgMusic(\n          currentBgUrl.value,\n          bgPlayTime.value,\n          bgSectionId.value,\n          bgAudioId.value\n        )\n      }\n    } else if (currentBgUrl.value) {\n      // 如果没有创建对象或其他原因，重新播放\n      playBgMusic(\n        currentBgUrl.value,\n        bgPlayTime.value,\n        bgSectionId.value,\n        bgAudioId.value\n      )\n    }\n  }\n\n  // 将TTS音频添加到播放队列\n  const enqueueTtsAudio = (url, sectionId = null, audioId = null) => {\n    console.log('将TTS音频添加到队列', {\n      url,\n      sectionId,\n      audioId,\n      currentQueueLength: ttsQueue.value.length,\n    })\n\n    // 添加到队列\n    ttsQueue.value.push({\n      url,\n      sectionId,\n      audioId,\n    })\n\n    // 如果队列没有在处理中，则开始处理\n    if (!isProcessingQueue.value) {\n      playNextInQueue()\n    }\n  }\n\n  // 播放队列中的下一个TTS音频\n  const playNextInQueue = () => {\n    // 如果队列为空，重置处理状态\n    if (ttsQueue.value.length === 0) {\n      isProcessingQueue.value = false\n      console.log('TTS队列为空，等待新音频')\n      return\n    }\n\n    // 标记队列处理中\n    isProcessingQueue.value = true\n\n    // 取出队列中的第一个音频\n    const nextAudio = ttsQueue.value.shift()\n    console.log('播放队列中的下一个TTS音频', {\n      remainingInQueue: ttsQueue.value.length,\n      nextAudio,\n    })\n\n    // 播放该音频\n    playTtsAudioDirectly(nextAudio.url, nextAudio.sectionId, nextAudio.audioId)\n  }\n\n  // 直接播放TTS音频（内部使用，不要直接调用）\n  const playTtsAudioDirectly = (url, sectionId = null, audioId = null) => {\n    initTtsAudioContext()\n\n    // 保存相关ID和URL\n    ttsSectionId.value = sectionId\n    ttsAudioId.value = audioId\n    currentTtsUrl.value = url // 保存当前URL，用于恢复播放\n\n    // 重置音频长度，确保为新音频重新获取长度\n    ttsPlayTime.value = 0\n\n    // 设置音频源并播放\n    ttsAudioContext.value.src = url\n\n    // 确保使用当前设置的音量\n    ttsAudioContext.value.volume = ttsVolume.value\n\n    // 尝试播放\n    try {\n      ttsAudioContext.value.play()\n      ttsIsPlaying.value = true\n      ttsPaused.value = false // 重置暂停状态\n      console.log('正在播放TTS音频', {\n        url: url.substring(0, 50) + '...', // 只显示URL的一部分，避免日志太长\n        sectionId,\n        audioId,\n        volume: ttsVolume.value,\n      })\n    } catch (err) {\n      console.error('播放TTS音频失败', err)\n      // 继续下一个\n      setTimeout(playNextInQueue, 500)\n    }\n  }\n\n  // 外部接口：添加TTS音频到播放队列\n  const playTtsAudio = (url, sectionId = null, audioId = null) => {\n    // 将音频添加到队列\n    enqueueTtsAudio(url, sectionId, audioId)\n  }\n\n  // 暂停/恢复背景音乐（切换状态）\n  const toggleBgMusic = () => {\n    if (bgIsPlaying.value) {\n      pauseBgMusic()\n    } else {\n      resumeBgMusic()\n    }\n  }\n\n  // 暂停/恢复TTS音频（切换状态）\n  const toggleTtsAudio = () => {\n    if (!ttsAudioContext.value) return\n\n    if (ttsIsPlaying.value) {\n      pauseTtsAudio()\n    } else {\n      resumeTtsAudio()\n    }\n  }\n\n  // 暂停TTS音频\n  const pauseTtsAudio = () => {\n    if (ttsAudioContext.value && ttsIsPlaying.value) {\n      ttsAudioContext.value.pause()\n      ttsIsPlaying.value = false\n      ttsPaused.value = true\n      console.log('TTS音频已暂停')\n    }\n  }\n\n  // 恢复TTS音频播放\n  const resumeTtsAudio = () => {\n    if (!ttsAudioContext.value) {\n      console.log('TTS音频上下文未初始化，无法恢复播放')\n      return\n    }\n\n    if (ttsPaused.value && currentTtsUrl.value) {\n      // 尝试恢复播放\n      try {\n        // 如果暂停状态，则直接播放当前音频\n        ttsAudioContext.value.play()\n        ttsIsPlaying.value = true\n        ttsPaused.value = false\n        console.log('恢复TTS音频播放')\n      } catch (err) {\n        console.error('恢复TTS音频播放失败', err)\n\n        // 如果直接恢复失败，尝试重新设置音频源\n        ttsAudioContext.value.src = currentTtsUrl.value\n        ttsAudioContext.value.volume = ttsVolume.value\n        ttsAudioContext.value.play()\n        ttsIsPlaying.value = true\n        ttsPaused.value = false\n      }\n    } else if (!ttsIsPlaying.value && ttsQueue.value.length > 0) {\n      // 如果没有暂停的音频但队列中有待播放的内容，播放下一个\n      playNextInQueue()\n    } else {\n      console.log('没有可恢复播放的TTS音频')\n    }\n  }\n\n  // 停止背景音乐\n  const stopBgMusic = () => {\n    if (bgAudioManager.value) {\n      bgAudioManager.value.stop()\n      bgIsPlaying.value = false\n    }\n  }\n\n  // 停止TTS音频\n  const stopTtsAudio = () => {\n    if (ttsAudioContext.value) {\n      ttsAudioContext.value.stop()\n      ttsIsPlaying.value = false\n      ttsPaused.value = false // 重置暂停状态\n    }\n\n    // 清空队列\n    ttsQueue.value = []\n    isProcessingQueue.value = false\n  }\n\n  // 停止所有音频\n  const stopAllAudio = () => {\n    stopBgMusic()\n    stopTtsAudio()\n  }\n\n  // 上报背景音乐播放完成\n  const reportBgMusicFinish = () => {\n    // 没有必要的ID就不上报\n    if (!bgSectionId.value && !bgAudioId.value) return\n\n    const reportData = {\n      section_id: bgSectionId.value,\n      audio_id: bgAudioId.value,\n      play_time: Number(bgPlayTime.value.toFixed(1)),\n      is_finish: true,\n    }\n\n    console.log('上报背景音乐播放完成', reportData)\n    // 设置为非电台模式\n    isRadioStore.setIsRadio(false)\n    // 使用HTTP请求上报\n    sendProgressReport(reportData)\n  }\n\n  // 上报TTS音频播放完成\n  const reportTtsFinish = () => {\n    // 没有必要的ID就不上报\n    if (!ttsSectionId.value && !ttsAudioId.value) return\n\n    const reportData = {\n      section_id: ttsSectionId.value,\n      audio_id: ttsAudioId.value,\n      is_finish: true,\n      play_time: Number(ttsPlayTime.value.toFixed(1)), // 添加play_time字段\n    }\n\n    console.log('上报TTS音频播放完成', reportData)\n\n    // 使用HTTP请求上报\n    sendProgressReport(reportData)\n  }\n\n  // 上报当前播放进度(App onHide时调用)\n  const reportCurrentProgress = () => {\n    // 如果背景音乐正在播放，上报当前进度\n    if (bgIsPlaying.value && bgSectionId.value && bgAudioId.value) {\n      const reportData = {\n        section_id: bgSectionId.value,\n        audio_id: bgAudioId.value,\n        play_time: Number(bgPlayTime.value.toFixed(1)),\n        is_finish: false,\n      }\n\n      console.log('上报背景音乐当前进度', reportData)\n      sendProgressReport(reportData)\n    }\n\n    // 如果TTS正在播放，上报其进度\n    if (ttsIsPlaying.value && ttsSectionId.value && ttsAudioId.value) {\n      const reportData = {\n        section_id: ttsSectionId.value,\n        audio_id: ttsAudioId.value,\n        is_finish: false,\n        play_time: Number(ttsPlayTime.value.toFixed(1)), // 添加play_time字段\n      }\n\n      console.log('上报TTS当前进度', reportData)\n      sendProgressReport(reportData)\n    }\n  }\n\n  // 发送上报请求\n  const sendProgressReport = (data) => {\n    const token = uni.getStorageSync('token')\n\n    uni.request({\n      url: UPLOAD_PROGRESS_URL,\n      method: 'POST',\n      header: {\n        'Content-Type': 'application/json',\n        Authorization: `bearer ${token}`,\n      },\n      data: data,\n      success: (res) => {\n        console.log('上报进度成功', res.data)\n      },\n      fail: (err) => {\n        console.error('上报进度失败', err)\n      },\n    })\n  }\n\n  // 获取队列状态信息（用于调试）\n  const getQueueStatus = () => {\n    return {\n      queueLength: ttsQueue.value.length,\n      isProcessing: isProcessingQueue.value,\n      currentlyPlaying: ttsIsPlaying.value\n        ? {\n            sectionId: ttsSectionId.value,\n            audioId: ttsAudioId.value,\n          }\n        : null,\n    }\n  }\n\n  // 清除TTS音频相关信息（重置TTS状态）\n  const resetTtsAudio = () => {\n    console.log('重置TTS音频状态')\n\n    // 如果正在播放，先停止\n    if (ttsIsPlaying.value && ttsAudioContext.value) {\n      ttsAudioContext.value.stop()\n    }\n\n    // 重置TTS相关状态\n    ttsSectionId.value = null\n    ttsAudioId.value = null\n    ttsIsPlaying.value = false\n    ttsPlayTime.value = 0\n    ttsPaused.value = false\n    currentTtsUrl.value = ''\n\n    // 清空队列\n    ttsQueue.value = []\n    isProcessingQueue.value = false\n\n    // 保留音量设置，不重置ttsVolume.value\n\n    console.log('TTS音频状态已重置')\n  }\n\n  // 清除背景音乐相关信息（重置背景音乐状态）\n  const resetBgMusic = () => {\n    console.log('重置背景音乐状态')\n\n    // 如果正在播放，先停止\n    if (bgIsPlaying.value && bgAudioManager.value) {\n      bgAudioManager.value.stop()\n    }\n\n    // 重置背景音乐相关状态\n    bgSectionId.value = null\n    bgAudioId.value = null\n    bgIsPlaying.value = false\n    bgPlayTime.value = 0\n    currentBgUrl.value = ''\n\n    // 保留音量和循环设置，不重置bgVolume.value和bgLoop.value\n\n    console.log('背景音乐状态已重置')\n\n    // 停止歌词同步\n    try {\n      const messageProcessorStore = useMessageProcessorStore()\n      if (messageProcessorStore && messageProcessorStore.stopLyricSync) {\n        messageProcessorStore.stopLyricSync()\n      }\n    } catch (err) {\n      console.error('停止歌词同步失败', err)\n    }\n  }\n\n  return {\n    // 背景音乐相关\n    playBgMusic,\n    stopBgMusic,\n    pauseBgMusic,\n    resumeBgMusic,\n    toggleBgMusic,\n    bgIsPlaying,\n    bgPlayTime, // 确保导出这个用于歌词同步\n    setBgVolume,\n    bgVolume,\n    setBgLoop,\n    bgLoop,\n    musicTitle, // 导出计算属性，便于UI显示\n    resetBgMusic, // 新增：重置背景音乐\n\n    // TTS相关\n    playTtsAudio,\n    stopTtsAudio,\n    toggleTtsAudio,\n    pauseTtsAudio, // 新增：暂停TTS音频\n    resumeTtsAudio, // 新增：恢复TTS音频播放\n    ttsIsPlaying,\n    ttsPaused, // 新增：TTS暂停状态\n    setTtsVolume,\n    ttsVolume,\n    getQueueStatus,\n    resetTtsAudio, // 新增：重置TTS音频\n\n    // 通用方法\n    stopAllAudio,\n    reportCurrentProgress,\n\n    // 播放状态\n    get isAnyPlaying() {\n      return bgIsPlaying.value || ttsIsPlaying.value\n    },\n\n    // 队列长度（便于调试显示）\n    get queueLength() {\n      return ttsQueue.value.length\n    },\n  }\n})\n//\n"],"names":["defineStore","useSubjectStore","useIsRadioStore","ref","computed","baseUrl","uni","useMessageProcessorStore","err"],"mappings":"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"}