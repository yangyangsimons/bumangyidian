{"version":3,"file":"barrage.js","sources":["stores/barrage.js"],"sourcesContent":["// stores/barrage.js\nimport { defineStore } from 'pinia'\nimport { useMessageProcessorStore } from './messageProcessor'\nexport const useBarrageStore = defineStore('barrage', {\n  state: () => ({\n    messages: [],\n\n    //用户跟踪当前流式消息的ID\n    currentStreamingMessageId: null,\n  }),\n  actions: {\n    addMessage(payload) {\n      const messageId = Date.now()\n      // 如果消息类型是流式消息\n      if (payload.isStreaming) {\n        this.currentStreamingMessageId = messageId\n      }\n\n      this.messages.push({\n        ...payload,\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n      })\n      console.log('所有消息', this.messages)\n      return messageId // 返回消息ID\n    },\n\n    appendToStreamingMessage(text) {\n      if (!this.currentStreamingMessageId) {\n        // 如果没有正在进行的流式消息，创建一个新的\n        this.startNewStreamingMessage()\n      }\n\n      const msgIndex = this.messages.findIndex(\n        (msg) => msg.id === this.currentStreamingMessageId\n      )\n\n      if (msgIndex !== -1) {\n        this.messages[msgIndex].content += text\n      } else {\n        // 如果找不到消息，创建新的\n        this.currentStreamingMessageId = this.addMessage({\n          type: 'ai',\n          content: text,\n          isStreaming: true,\n        })\n      }\n    },\n    // 完成流式消息\n    finishStreamingMessage(fullText) {\n      if (this.currentStreamingMessageId) {\n        const msgIndex = this.messages.findIndex(\n          (msg) => msg.id === this.currentStreamingMessageId\n        )\n        if (msgIndex !== -1 && fullText) {\n          // 替换为完整内容\n          this.messages[msgIndex].content = fullText\n        }\n        // 标记不再是流式消息\n        if (msgIndex !== -1) {\n          this.messages[msgIndex].isStreaming = false\n        }\n      }\n      this.currentStreamingMessageId = null\n    },\n    startNewStreamingMessage() {\n      // 创建一个新的流式消息\n      this.currentStreamingMessageId = this.addMessage({\n        type: 'ai',\n        content: '',\n        isStreaming: true,\n      })\n      return this.currentStreamingMessageId\n    },\n    // 清除所有消息\n    clearMessages() {\n      this.messages = []\n      this.currentStreamingMessageId = null\n      // 重置 messageProcessor 中的状态\n      const messageProcessorStore = useMessageProcessorStore()\n      messageProcessorStore.resetProcessor()\n    },\n  },\n})\n"],"names":["defineStore","uni","useMessageProcessorStore"],"mappings":";;;AAGY,MAAC,kBAAkBA,cAAW,YAAC,WAAW;AAAA,EACpD,OAAO,OAAO;AAAA,IACZ,UAAU,CAAE;AAAA;AAAA,IAGZ,2BAA2B;AAAA,EAC/B;AAAA,EACE,SAAS;AAAA,IACP,WAAW,SAAS;AAClB,YAAM,YAAY,KAAK,IAAK;AAE5B,UAAI,QAAQ,aAAa;AACvB,aAAK,4BAA4B;AAAA,MAClC;AAED,WAAK,SAAS,KAAK;AAAA,QACjB,GAAG;AAAA,QACH,IAAI,KAAK,IAAK;AAAA,QACd,YAAW,oBAAI,KAAM,GAAC,YAAa;AAAA,MAC3C,CAAO;AACDC,oBAAY,MAAA,MAAA,OAAA,2BAAA,QAAQ,KAAK,QAAQ;AACjC,aAAO;AAAA,IACR;AAAA,IAED,yBAAyB,MAAM;AAC7B,UAAI,CAAC,KAAK,2BAA2B;AAEnC,aAAK,yBAA0B;AAAA,MAChC;AAED,YAAM,WAAW,KAAK,SAAS;AAAA,QAC7B,CAAC,QAAQ,IAAI,OAAO,KAAK;AAAA,MAC1B;AAED,UAAI,aAAa,IAAI;AACnB,aAAK,SAAS,QAAQ,EAAE,WAAW;AAAA,MAC3C,OAAa;AAEL,aAAK,4BAA4B,KAAK,WAAW;AAAA,UAC/C,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aAAa;AAAA,QACvB,CAAS;AAAA,MACF;AAAA,IACF;AAAA;AAAA,IAED,uBAAuB,UAAU;AAC/B,UAAI,KAAK,2BAA2B;AAClC,cAAM,WAAW,KAAK,SAAS;AAAA,UAC7B,CAAC,QAAQ,IAAI,OAAO,KAAK;AAAA,QAC1B;AACD,YAAI,aAAa,MAAM,UAAU;AAE/B,eAAK,SAAS,QAAQ,EAAE,UAAU;AAAA,QACnC;AAED,YAAI,aAAa,IAAI;AACnB,eAAK,SAAS,QAAQ,EAAE,cAAc;AAAA,QACvC;AAAA,MACF;AACD,WAAK,4BAA4B;AAAA,IAClC;AAAA,IACD,2BAA2B;AAEzB,WAAK,4BAA4B,KAAK,WAAW;AAAA,QAC/C,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACrB,CAAO;AACD,aAAO,KAAK;AAAA,IACb;AAAA;AAAA,IAED,gBAAgB;AACd,WAAK,WAAW,CAAE;AAClB,WAAK,4BAA4B;AAEjC,YAAM,wBAAwBC,wBAAAA,yBAA0B;AACxD,4BAAsB,eAAgB;AAAA,IACvC;AAAA,EACF;AACH,CAAC;;"}