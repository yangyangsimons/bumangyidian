{"version":3,"file":"barrage.js","sources":["components/barrage/barrage.vue","/Users/lynnyang/work/project/xjlab/HBuilderProjects/bumangyidian/components/barrage/barrage.vue?type=component"],"sourcesContent":["<template>\n  <view class=\"barrage-container\">\n    <view class=\"scroll-container\">\n      <view class=\"top-mask\"></view>\n      <scroll-view\n        scroll-y\n        class=\"scroll-view\"\n        :show-scrollbar=\"false\"\n        :scroll-with-animation=\"true\"\n        :scroll-top=\"scrollTop\"\n      >\n        <view class=\"messages-wrapper\">\n          <view\n            v-for=\"msg in messages\"\n            :key=\"msg.id\"\n            class=\"message-bubble\"\n            :class=\"{\n              user: msg.type === 'user',\n              leaveMessage: msg.type === 'leaveMessage',\n            }\"\n          >\n            <view class=\"content-box\">\n              <text class=\"content\">\n                <text class=\"type\"> </text>{{ msg.content }}\n              </text>\n            </view>\n          </view>\n        </view>\n      </scroll-view>\n    </view>\n  </view>\n</template>\n\n<script setup>\n  import {\n    ref,\n    watch,\n    nextTick,\n    computed,\n    onMounted,\n    onUnmounted,\n    getCurrentInstance,\n  } from 'vue'\n\n  import { useBarrageStore } from '@/stores/barrage'\n  const instance = getCurrentInstance() // 获取组件实例\n  const barrageStore = useBarrageStore()\n  const scrollTop = ref(0)\n\n  // 保留原来的scrollToBottom逻辑，但添加错误处理和内存优化\n  const scrollToBottom = async () => {\n    await nextTick()\n\n    try {\n      const query = uni.createSelectorQuery().in(instance)\n      query\n        .select('.messages-wrapper')\n        .boundingClientRect((wrapperRect) => {\n          if (!wrapperRect) return // 防止空对象\n\n          query\n            .select('.scroll-view')\n            .boundingClientRect((scrollRect) => {\n              if (!scrollRect) return // 防止空对象\n\n              // 计算需要滚动的高度 = 内容总高度 - 容器可视高度\n              const heightDifference = wrapperRect.height - scrollRect.height\n              scrollTop.value = Math.max(0, heightDifference + 50) // 添加安全边距\n            })\n            .exec()\n        })\n        .exec()\n    } catch (error) {\n      console.error('滚动计算出错:', error)\n    }\n  }\n\n  // 监听消息变化并在组件卸载时清理\n  const stopWatch = watch(\n    () => barrageStore.messages.length,\n    (newVal, oldVal) => {\n      if (newVal > oldVal) {\n        scrollToBottom() // 直接调用，不使用防抖以保证即时滚动\n      }\n    }\n  )\n\n  // 组件卸载时清理资源\n  onUnmounted(() => {\n    stopWatch() // 清理监听器\n  })\n\n  const messages = computed(() => {\n    // 限制日志输出频率\n    if (barrageStore.messages.length % 5 === 0) {\n      console.log('消息数量:', barrageStore.messages.length)\n    }\n    return barrageStore.messages\n  })\n</script>\n\n<style lang=\"scss\" scoped>\n  @import './index.scss';\n</style>\n","import Component from '/Users/lynnyang/work/project/xjlab/HBuilderProjects/bumangyidian/components/barrage/barrage.vue'\nwx.createComponent(Component)"],"names":["getCurrentInstance","useBarrageStore","ref","nextTick","uni","watch","onUnmounted","computed"],"mappings":";;;;;;AA6CE,UAAM,WAAWA,cAAAA,mBAAoB;AACrC,UAAM,eAAeC,eAAAA,gBAAiB;AACtC,UAAM,YAAYC,cAAG,IAAC,CAAC;AAGvB,UAAM,iBAAiB,YAAY;AACjC,YAAMC,yBAAU;AAEhB,UAAI;AACF,cAAM,QAAQC,cAAG,MAAC,oBAAmB,EAAG,GAAG,QAAQ;AACnD,cACG,OAAO,mBAAmB,EAC1B,mBAAmB,CAAC,gBAAgB;AACnC,cAAI,CAAC;AAAa;AAElB,gBACG,OAAO,cAAc,EACrB,mBAAmB,CAAC,eAAe;AAClC,gBAAI,CAAC;AAAY;AAGjB,kBAAM,mBAAmB,YAAY,SAAS,WAAW;AACzD,sBAAU,QAAQ,KAAK,IAAI,GAAG,mBAAmB,EAAE;AAAA,UACjE,CAAa,EACA,KAAM;AAAA,QACnB,CAAS,EACA,KAAM;AAAA,MACV,SAAQ,OAAO;AACdA,sBAAAA,MAAc,MAAA,SAAA,wCAAA,WAAW,KAAK;AAAA,MAC/B;AAAA,IACF;AAGD,UAAM,YAAYC,cAAK;AAAA,MACrB,MAAM,aAAa,SAAS;AAAA,MAC5B,CAAC,QAAQ,WAAW;AAClB,YAAI,SAAS,QAAQ;AACnB,yBAAgB;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAGDC,kBAAAA,YAAY,MAAM;AAChB,gBAAW;AAAA,IACf,CAAG;AAED,UAAM,WAAWC,cAAAA,SAAS,MAAM;AAE9B,UAAI,aAAa,SAAS,SAAS,MAAM,GAAG;AAC1CH,sBAAA,MAAA,MAAA,OAAA,wCAAY,SAAS,aAAa,SAAS,MAAM;AAAA,MAClD;AACD,aAAO,aAAa;AAAA,IACxB,CAAG;;;;;;;;;;;;;;;;;ACjGH,GAAG,gBAAgB,SAAS;"}